<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
  <!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包-->
  <!--<classPathEntry  location="E:\developer\mybatis-generator-core-1.3.2\lib\mysql-connector-java-5.1.25-bin.jar"/>-->

  <context id="MySQLTables" targetRuntime="MyBatis3">

    <!-- 生成的Java文件的编码 -->
    <property name="javaFileEncoding" value="UTF-8"/>

    <!-- 格式化java代码 -->
    <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>

    <!-- 格式化XML代码 -->
    <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

    <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
    <property name="beginningDelimiter" value="`"/>
    <property name="endingDelimiter" value="`"/>

    <!-- 生成的pojo，将implements Serializable,为生成的Java模型类添加序列化接口-->
    <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>

    <!-- 为生成的Java模型创建一个toString方法 -->
    <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>

    <!-- 生成 entity时，生成hashcode和equals方法
    <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />  -->

    <!-- 这个插件用来在XXXExample类中生成大小写敏感的LIKE方法
        （插件本身用处不大，但是我们可以通过这个插件学习给XXXExample类添加额外的方法）
    -->
    <!--<plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin" />-->

    <!-- 这个插件可以使用正则表达式的方式来重命名生成的XXXExample类，
        通过配置 searchString和replaceString属性来完成
        （这个实现原理请参考MBG配置文件中的columnRenamingRule元素）
    -->
    <!--<plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">-->
    <!--<property name="searchString" value="Example$" />-->
    <!--<property name="replaceString" value="Criteria" />-->
    <!--</plugin>-->

    <!-- 这个插件可以生成一个新的selectByExample方法，这个方法可以接受一个RowBounds参数，
       主要用来实现分页（当然，我们后面会生成我们自己的分页查询函数），
       这个插件只针对MyBatis3/MyBatis3Simple有效
       Mapper中会加入一个新的方法：
       selectByExampleWithRowbounds(XxxExample example, RowBounds rowBounds)
    -->
    <!--<plugin type="org.mybatis.generator.plugins.RowBoundsPlugin"/>-->


    <commentGenerator>
      <!--是否取消注释（默认false），一定要保留@mbggenerated,MBG通过该字符串来判断代码是否为代码生成器生成的代码，
                                  有该标记的的代码在重新生成的时候会被删除，不会重复。不会在XML中出现重复元素。-->
      <property name="suppressAllComments" value="true"/>
      <!--是否生成注释代时间戳（默认false），建议设为true，避免重复提交-->
      <property name="suppressDate" value="true"/>
    </commentGenerator>
    <!--数据库链接URL，用户名、密码 -->
    <!--  <jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver"
        connectionURL="jdbc:oracle:thin:@192.168.10.73:1521/tradedb" userId="act_trade"
        password="1">
      </jdbcConnection>-->
    <jdbcConnection driverClass="com.mysql.jdbc.Driver"
      connectionURL="jdbc:mysql://192.168.10.89/zeus" userId="66money" password="9cHDafV8BA">
    </jdbcConnection>
    <javaTypeResolver>
      <!-- 把jdbc中的decimal与numberic类型转化为java.math.BigDecimal类型
          默认情况下的转换规则为：
          如果精度>0或者长度>18，就会使用java.math.BigDecimal
          如果精度=0并且10<=长度<=18，就会使用java.lang.Long
          如果精度=0并且5<=长度<=9，就会使用java.lang.Integer
          如果精度=0并且长度<5，就会使用java.lang.Short-->
      <property name="forceBigDecimals" value="false"/>
    </javaTypeResolver>

    <!-- 生成模型的包名和位置-->
    <javaModelGenerator targetPackage="com.uusoft.test.zeus.domain.model"
      targetProject="../domain/src/main/java">
      <property name="enableSubPackages" value="true"/>
      <property name="trimStrings" value="true"/>
    </javaModelGenerator>

    <!-- 生成映射文件的包名和位置-->
    <sqlMapGenerator targetPackage="com.uusoft.test.zeus.dao"
      targetProject="src/test/resources/mapper">
    <property name="enableSubPackages" value="true"/>
    </sqlMapGenerator>

    <!-- 生成DAO的包名和位置-->
    <javaClientGenerator type="XMLMAPPER"
      targetPackage="com.uusoft.test.zeus.dao" targetProject="src/main/java">
    <property name="enableSubPackages" value="true"/>
    </javaClientGenerator>

    <!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名-->
    <table tableName="APP_MANAGER" domainObjectName="AppManager"
      enableCountByExample="false" enableUpdateByExample="false"
      enableDeleteByExample="false" enableSelectByExample="false"
      selectByExampleQueryId="false" enableUpdateByPrimaryKey="true">
    </table>
    <table tableName="ENV_MANAGER" domainObjectName="EnvManager"
      enableCountByExample="false" enableUpdateByExample="false"
      enableDeleteByExample="false" enableSelectByExample="false"
      selectByExampleQueryId="false" enableUpdateByPrimaryKey="true">
    </table>
    <table tableName="INTERFACE_MANAGER" domainObjectName="InterfaceManager"
      enableCountByExample="false" enableUpdateByExample="false"
      enableDeleteByExample="false" enableSelectByExample="false"
      selectByExampleQueryId="false" enableUpdateByPrimaryKey="true">
    </table>
    <table tableName="Interface_Params" domainObjectName="InterfaceParams"
      enableCountByExample="false" enableUpdateByExample="false"
      enableDeleteByExample="false" enableSelectByExample="false"
      selectByExampleQueryId="false" enableUpdateByPrimaryKey="true">
    </table>
  </context>
</generatorConfiguration>